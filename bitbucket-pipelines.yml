definitions:
  services:
    docker:
      memory: 3072
  script-lines:
    - &set-environment-and-project-type >-
      IFS='-' read -ra parts <<< "$BITBUCKET_DEPLOYMENT_ENVIRONMENT"; export ENVIRONMENT="${parts[0]}"; export PROJECT_TYPE="${parts[1]}"; unset IFS
    - &set-gcloud-project >-
      GCLOUD_PROJECT_VAR="${ENVIRONMENT^^}_GCLOUD_PROJECT"; GCLOUD_PROJECT="${!GCLOUD_PROJECT_VAR}"
    - &set-api-key-file >-
      GCLOUD_API_KEYFILE_VAR="${ENVIRONMENT^^}_GCLOUD_API_KEYFILE"; echo "${!GCLOUD_API_KEYFILE_VAR}" | base64 -d > ./gcloud-api-key.json

  steps:
    - step: &deploy
        name: Build and deploy
        image: google/cloud-sdk:alpine
        services:
          - docker
        caches:
          - docker
        script:
          - *set-environment-and-project-type
          # Generate configuration files
          - apk update && apk add gettext
          - /usr/bin/envsubst < .env.template > .env
          - /usr/bin/envsubst '$BITBUCKET_COMMIT' < nginx.template.conf > nginx.conf
          - export DOCKER_BUILDKIT=0
          - *set-gcloud-project
          # Extract Google Cloud API Key
          - *set-api-key-file
          # Authenticate
          - cat ./gcloud-api-key.json | docker login -u _json_key --password-stdin https://gcr.io
          - gcloud auth activate-service-account --key-file gcloud-api-key.json
          # Build and deploy
          - export IMAGE_NAME=gcr.io/$GCLOUD_PROJECT/$BITBUCKET_REPO_SLUG:$BITBUCKET_COMMIT-$BITBUCKET_BRANCH-$PROJECT_TYPE
          - docker build -t ${IMAGE_NAME} . --build-arg PROJECT_TYPE=$PROJECT_TYPE --build-arg GIT_COMMIT=$BITBUCKET_COMMIT --build-arg SENTRY_PROJECT=$BITBUCKET_REPO_SLUG-$PROJECT_TYPE --build-arg SENTRY_ORG=$SENTRY_ORG --build-arg SENTRY_DSN=$SENTRY_DSN --build-arg SENTRY_AUTH_TOKEN=$SENTRY_AUTH_TOKEN
          - docker push ${IMAGE_NAME}
          - gcloud run deploy $BITBUCKET_REPO_SLUG-$BITBUCKET_BRANCH-$PROJECT_TYPE --platform=managed --allow-unauthenticated --image=$IMAGE_NAME --memory=$GCLOUD_RUN_MEMORY --timeout=$GCLOUD_RUN_TIMEOUT --region=$GCLOUD_RUN_REGION --max-instances=$GCLOUD_RUN_MAX_INSTANCES --project=$GCLOUD_PROJECT

    - step: &check-code-style
        name: Check code style
        image: node:20-slim
        caches:
          - node
        script:
          - npm install
          - npm run lint-check
          - npm run ts-check
          - npm run format-check

  parallels:
    - parallel: &deploy-dev
        steps:
          - step:
              <<: *deploy
              name: Build and deploy user app
              deployment: dev-user
          - step:
              <<: *deploy
              name: Build and deploy admin app
              deployment: dev-admin

    - parallel: &deploy-prod
        steps:
          - step:
              <<: *deploy
              name: Build and deploy user app
              deployment: prod-user
          - step:
              <<: *deploy
              name: Build and deploy admin app
              deployment: prod-admin

    - parallel: &assure-quality
        steps:
          - step: *check-code-style

clone:
  depth: 1

pipelines:
  branches:
    dev:
      - parallel: *assure-quality
      - parallel: *deploy-dev
    master:
      - parallel: *assure-quality
      - parallel: *deploy-prod

  pull-requests:
    "**":
      - parallel: *assure-quality
